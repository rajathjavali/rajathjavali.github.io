/** Class implementing the table. */
class Table {
    /**
     * Creates a Table Object
     */
    constructor(teamData, treeObject) {

        //Maintain reference to the tree Object; 
        this.tree = treeObject; 

        // Create list of all elements that will populate the table
        // Initially, the tableElements will be identical to the teamData
        this.tableElements = null; // 

        ///** Store all match data for the 2014 Fifa cup */
        this.teamData = teamData;

        //Default values for the Table Headers
        this.tableHeaders = ["Delta Goals", "Result", "Wins", "Losses", "TotalGames"];

        /** To be used when sizing the svgs in the table cells.*/
        this.cell = {
            "width": 70,
            "height": 20,
            "buffer": 15
        };

        this.bar = {
            "height": 20
        };

        /** Set variables for commonly accessed data columns*/
        this.goalsMadeHeader = 'Goals Made';
        this.goalsConcededHeader = 'Goals Conceded';

        /** Setup the scales*/
        this.goalScale = null; 

        /** Used for games/wins/losses*/
        this.gameScale = null; 

        /**Color scales*/
        /**For aggregate columns  Use colors '#ece2f0', '#016450' for the range.*/
        this.aggregateColorScale = null; 

        /**For goal Column. Use colors '#cb181d', '#034e7b'  for the range.*/
        this.goalColorScale = null; 
    }
	
    /**
     * Creates a table skeleton including headers that when clicked allow you to sort the table by the chosen attribute.
     * Also calculates aggregate values of goals, wins, losses and total games as a function of country.
     *
     */
    createTable() {

        // ******* TODO: PART II *******

        // Update Scale Domains
		let max = function(a,b){
			return a>b?a:b;
		}

		let min = function(a,b){
			return a<b?a:b;
		}
				
		let dataMax = d3.max(this.teamData, d => {return max(d.value[this.goalsMadeHeader], d.value[this.goalsConcededHeader])});
		//let dataMin = d3.min(data, d => {return min(d.value[goalsMade], d.value[goalsConceded])});
		
		this.goalScale = d3.scaleLinear()
						.domain([0, dataMax])
						.range([this.cell.buffer, 2 * this.cell.width - this.cell.buffer]);
        
		
		// Create the x axes for the goalScale.
		let goalAxis = d3.axisBottom();
		goalAxis.scale(this.goalScale);
		
        //add GoalAxis to header of col 1.
		let table = d3.select("#goalHeader")
						.append("svg")
						.attr("width", 2 * this.cell.width)
						.attr("height", this.cell.height);
		table.append("g")
				.call(goalAxis);

				
		this.tableElements = this.teamData.slice();
		
		// ******* TODO: PART V *******

        // Set sorting callback for clicking on headers

        // Clicking on headers should also trigger collapseList() and updateTable(). 

       
    }


    /**
     * Updates the table contents with a row for each element in the global variable tableElements.
     */
    updateTable() {
        // ******* TODO: PART III *******
        //Create table rows
		/*function(d){
							return [d.key, [d.value[this.goalsConcededHeader], d.value[this.goalsMadeHeader]],
									d.value.Result.label, d.value.Wins, d.value.Losses, d.value.TotalGames];
						}*/
		console.log(this.tableElements);
		
		let w = this.cell.width;
		let rowWidths = [w, 2 * w, 2 * w, w, w, w];
		let dataMax = d3.max(this.tableElements, d => d.value[this["Delta Goals"]]);
		let dataMin = d3.min(this.tableElements, d => d.value[this["Delta Goals"]]);
		
		let maxgames = d3.max(this.tableElements, d=> d.value.TotalGames);
		let colorScale = d3.scaleLinear()
							.domain([0, maxgames])
							.range(["#e6ffe6", "#003300"]);
		
		let barScale = d3.scaleLinear()
							.domain([0, maxgames])
							.range([0, this.cell.width - this.cell.buffer]);
		
		let table = d3.select("#matchTable").select("tbody").selectAll("tr").data(this.tableElements);
		let tr = table.enter().append("tr")
					.attr("id", d=>d.key)
					.attr("class", d=>d.value.type);
					
		let goalScale = this.goalScale;
		console.log(goalScale);
        //Append th elements for the Team Names
		let th = tr.selectAll(".team").data(d=>[d.key])
					.enter()
					.append("th")
					.attr("width", this.cell.width)
					.attr("height", this.cell.height)
					.text(d=>d)
					.attr("class", "team");
			
        //Append td elements for the remaining columns.
		//Data for each cell is of the type: {'type':<'game' or 'aggregate'>, 'value':<[array of 1 or two elements]>}
		let goals = tr.selectAll(".goals").data(d=>[[{goals: d.value[this.goalsMadeHeader], type: d.value.type, delta: d.value["Delta Goals"]}, 
												{goals : d.value[this.goalsConcededHeader],  type: d.value.type, delta: d.value["Delta Goals"]}]]).enter();
		let td = goals.append("td")
					.append("svg")
					.attr("width", this.cell.width * 2)
					.attr("height", this.cell.height)
					.attr("class", "goals");
					
		td.selectAll("rect").data(d=>[d]).enter().append("rect")
					.attr("x", function(d){
						let min = d[0].goals < d[1].goals ? d[0].goals : d[1].goals;
						return goalScale(min);
					})
					.attr("y", d=>this.cell.height/2 - 5)
					.attr("height", 10)
					.attr("width", function(d){
						let min = d[0].goals < d[1].goals ? d[0].goals : d[1].goals;
						let max = d[0].goals > d[1].goals ? d[0].goals : d[1].goals;
						return goalScale(max) - goalScale(min);
					})
					.attr("style", function(d){
						if(d[0].delta < 0)
							return "fill: #f3988c";
						else
							return "fill: #a8bad6";
					})
		td.selectAll("circle").data(d=>d).enter().append("circle")
			.attr("cx", d=>goalScale(d.goals))
			.attr("cy", this.cell.height/2)
			.attr("r", 5)
			.attr("style", function(d,i){
				let val;
				if(d.type == "game")
				{
					if(i == 0)
						val = "stroke: #364e74; stroke-width: 3px; fill: white";
					else
						val = "stroke: #be2714; stroke-width: 3px; fill: white";
					if(d.delta == 0)
						val = "stroke: grey; stroke-width: 3px; fill: white";
				}
				else
				{
					if(i == 0)
						val = "fill: #364e74";
					else
						val = "fill: #be2714";
					if(d.delta == 0)
						val = "fill: grey";
				}
				return val;
			});
        
        let results = tr.selectAll(".results")
						.data(d=>[d.value.Result.label])
						.enter().append("td")
						.attr("width", 2 * this.cell.width)
						.attr("height", this.cell.height);
		results.text(d=>d);
		
		let bars = tr.selectAll(".bar").data(d=>[d.value.Wins, d.value.Losses, d.value.TotalGames])
						.enter()
						.append("td")
						.attr("width", this.cell.width)
						.attr("height", this.cell.height)
						.attr("class", "bar");
		
		let svg = bars.append("svg")
						.attr("width", this.cell.width)
						.attr("height", this.cell.height);
		svg.append("rect")
			.attr("x", 0)
			.attr("y", 0)
			.attr("height", this.cell.height)
			.attr("width", d=>barScale(d))
			.attr("style", d=>"fill:"+colorScale(d))
		svg.append("text")
			.text(d=>d)
			.attr("x", d=>barScale(d)-2)
			.attr("y", this.cell.height/4 * 3)
			.attr("style", "font-size: 12px ;fill: white; text-anchor: end");
        //Add scores as title property to appear on hover

        //Populate cells (do one type of cell at a time )

        //Create diagrams in the goals column

        //Set the color of all games that tied to light gray

    };

    /**
     * Updates the global tableElements variable, with a row for each row to be rendered in the table.
     *
     */
    updateList(i) {
        // ******* TODO: PART IV *******
       
        //Only update list for aggregate clicks, not game clicks
        
    }

    /**
     * Collapses all expanded countries, leaving only rows for aggregate values per country.
     *
     */
    collapseList() {
        
        // ******* TODO: PART IV *******

    }


}
